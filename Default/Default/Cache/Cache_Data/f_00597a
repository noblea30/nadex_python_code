{"version":3,"sources":["webpack:///./src/hosted_fields/common/connection/receiver.ts","webpack:///./src/hosted_fields/host/cb-iframe.ts","webpack:///./src/hosted_fields/host/cb-iframe-client.ts","webpack:///./src/hosted_fields/host/host-actions.ts","webpack:///./src/hosted_fields/host/component-registrar.ts","webpack:///./src/hosted_fields/common/holder.ts"],"names":["eventMethod","window","addEventListener","eventer","messageEvent","Receiver","e","console","log","data","cbEvent","comMessage","targetWindowName","name","windowType","Host","HOST_NAME","Component","origin","getJSDomainIframeCommunication","Master","source","parent","replyId","replyWindowId","srcWindowName","message","action","notTrue","MASTER_FRAME","receiveMessageError","resolve","then","options","noReply","reply","postMessage","catch","error","err","iframeId","targetDomain","responseError","responseMismatchError","targetWindow","this","getTargetWindow","target_iframe_name","message_action","targetIframeName","handlerType","metaInfo","frames","errorMeta","listen","iframeLoad","reject","iframeLoadSuccess","iframeLoadFailed","initialize","initializeSuccess","initializeFailed","id","container","componentField","styles","iframe","document","createElement","src","srcUrl","instance","DEFAULT_HEIGHT","frameStyles","margin","padding","border","overflow","display","minWidth","width","height","forEach","prop","style","existingElement","getElementById","classList","add","_height","fontSize","base","indexOf","parseInt","replace","appendChild","insertBefore","ref","loadSuccess","clearInterval","interval","loadFailure","isSPA","errorMessage","onload","count","setInterval","setTimeout","cbContainer","CONTAINER","insertInside","innerHTML","removeChild","cbFrame","CbIframe","type","CHILD_IFRAME_NAME","encodeURIComponent","location","host","childFrames","connectionClient","client","registerAction","Actions","TriggerEvent","handle","component","registry","frame","componentNotFound","delegateEvent","acknowledged","ReceiveStatusBroadcast","SetPaymentIntent3DSResult","send","SetAdyen3DS1VerificationResult","SetCheckoutCom3DSVerificationResult","SetCybersource3DSVerificationResult","SetAdyenIDealVerificationResult","CaptureKVL","SetStripeIDealVerificationResult","SetAdyenSofortVerificationResult","SetAdyenBancontactVerificationResult","SetAdyenGiropayVerificationResult","SetAdyenDotpayVerificationResult","SetFrameLoaded","CaptureException","SetAuthToken","SetHpData","jwt","SetCustomerHandle","customer_handle","SetPreviewPortalEmail","email","preview_portal_email","GetPreviewPortalEmail","GetHpData","param","portalFrame","contentWindow","referrer","ShowFrame","querySelector","HideFrame","cbIframeClient","checkMasterInitialized","masterFrame","ASSET_PATH","commMgrReady","insert","cbInstance","getCbInstance","payload","site","publishableKey","businessEntityId","getBusinessEntityId","window_url","href","RegisterMaster","register","Error","errorMountingMaster","containerElement","fieldType","childFrame","componentFrame","apply","length","push","opts","sendMessage","timeout","registered","masterIframe","createMasterFrame","event","receiver","filter","f","ComponentRegistrar","actionRegistry","actionHolder","actionName"],"mappings":"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","file":"140-b9e46e398b9d1bed7757.js","sourcesContent":["import Helpers from '@/helpers/index';\nimport Assert from '@/helpers/asserts';\nimport { MessageHandler, WindowType } from '@/hosted_fields/common/enums';\nimport { CommunicationMessage, ActionInnerMessage } from '@/hosted_fields/common/types';\nimport actionHolder from '@/hosted_fields/common/holder';\nimport Errors, { CbError } from '@/hosted_fields/common/errors';\nimport t from '@/hosted_fields/common/locale';\nimport { iframePostMessage, jsonify, jsonifyError, logTargetWindow } from '@/utils/utility-functions'\nimport Ids from '@/constants/ids';\nimport Logger from '@/utils/logger_old';\nimport { debugMode } from '@/constants/environment';\n\nlet eventMethod = window.addEventListener ? \"addEventListener\" : \"attachEvent\";\nlet eventer = window[eventMethod];\nlet messageEvent = eventMethod == \"attachEvent\" ? \"onmessage\" : \"message\";\n\nexport default class Receiver {\n  windowType: WindowType;\n  constructor(windowType: WindowType) {\n    this.windowType = windowType;\n    this.listen();\n    // TODO - whitelist domain from which messages can be received\n  }\n\n\n  listen() {\n    eventer(messageEvent, (e: MessageEvent) => {\n      if(debugMode()) console.log('message received', e.data);\n\n      if(typeof e.data != \"object\" || e.data == null) {\n        return;\n      }\n\n      if(!e.data.cbEvent) { \n        return;\n      }\n\n      // TODO handle only events from host and child\n      const comMessage: CommunicationMessage  = e.data;\n      if(!(comMessage.targetWindowName == window.name || (this.windowType == WindowType.Host && comMessage.targetWindowName == Ids.HOST_NAME))) {\n        return;\n      }\n\n      // if receiver window is of component type, checks whether event is from same domain\n      // TODO: to check if it is from master frame only\n      if(this.windowType == WindowType.Component && !(e.origin == (Helpers.getJSDomainIframeCommunication()))) {\n        return;\n      }\n\n      // if receiver window is of Master type, checks whether event is from same domain or from parent site\n      if(this.windowType == WindowType.Master && !(e.origin == (Helpers.getJSDomainIframeCommunication()) || e.source === window.parent )) {\n        return;\n      }\n\n      // !TODO refactor this - VIVEK\n      // if(this.windowType == WindowType.Master && !(e.origin == (Helpers.getJSDomainIframeCommunication()))) {\n      //   return;\n      // }\n\n      const replyId = comMessage.replyId;\n      const replyWindowId = comMessage.srcWindowName;\n\n      const message = <ActionInnerMessage>comMessage.message;\n      // only respond to messages with actions;\n      // TODO check if we can do it another way\n      if(!message || !message.action) {\n        return;\n      }\n      Assert.notTrue(() => this.windowType == WindowType.Component ? comMessage.srcWindowName == Ids.MASTER_FRAME: true, t(Errors.receiveMessageError));\n      actionHolder.resolve(message)\n        .then((data) => {\n          if((message.options && message.options.noReply) || \n            (comMessage.srcWindowName === comMessage.targetWindowName)) \n            return;\n          const reply : CommunicationMessage = {\n            replyId: replyId,\n            message: data,\n            cbEvent: true,\n            targetWindowName: comMessage.srcWindowName\n          }\n          // post message data\n          this.postMessage(replyWindowId, reply, e.origin);\n        }).catch((error) => {\n          if((message.options && message.options.noReply) || \n            (comMessage.srcWindowName === comMessage.targetWindowName)) return;\n          const err = new CbError(error)\n          const reply : CommunicationMessage = {\n            replyId: replyId,\n            error: jsonify(err),\n            message: error.message,\n            cbEvent: true,\n            targetWindowName: comMessage.srcWindowName\n          }\n          this.postMessage(replyWindowId, reply, e.origin);\n        });\n    })\n  }\n\n  postMessage(iframeId, message, targetDomain) {\n    // TODO additional check\n    // child components can only respond to parent\n    Assert.notTrue(() => this.windowType == WindowType.Component ? iframeId == Ids.MASTER_FRAME: true, t(Errors.responseError));\n    Assert.notTrue(() => this.windowType == WindowType.Component ? targetDomain == Helpers.getJSDomainIframeCommunication(): true, t(Errors.responseMismatchError));\n    if(debugMode()) console.log(`response to --> ${iframeId} ${JSON.stringify(message)}`);\n    const targetWindow = this.getTargetWindow(iframeId, { \n      target_iframe_name: iframeId,\n      message_action: message.targetWindowName,\n    })\n\n    try {\n      logTargetWindow({targetWindow, message, targetIframeName: iframeId, windowType: this.windowType, handlerType: MessageHandler.Receiver})\n    } catch(e) {\n      console.error(e)\n    }\n    \n    iframePostMessage(targetWindow, message, targetDomain, MessageHandler.Receiver);\n  }\n\n  getTargetWindow(targetIframeName: string, metaInfo?: object): Window {\n    try {\n      if(this.windowType == WindowType.Host) {\n        return window.frames[targetIframeName];\n      }\n  \n      if(!targetIframeName || targetIframeName == Ids.HOST_NAME){\n        return window.parent\n      }\n      else {\n        return window.parent.frames[targetIframeName];\n      }\n    } catch(e) {\n      // ignore cross origin error\n      if(this.windowType === WindowType.Component || this.windowType === WindowType.Master) {\n        const errorMeta = {\n          ...metaInfo,\n          ...window['cb_site_info']\n        }\n        Logger.error(e, errorMeta)\n        // Logger.kvl(jsonifyError(e), errorMeta);\n      }\n    }\n  }\n}","import Ids from '@/constants/ids';\nimport ComponentField from '@/hosted_fields/host/component-field';\nimport { WindowType } from '@/hosted_fields/common/enums';\nimport IDealField from './ideal-field';\nimport Helpers from '@/helpers';\nexport interface CbIframeElement extends HTMLIFrameElement {\n  instance?: CbIframe;\n}\n\nexport default class CbIframe {\n  name: string;\n  private type: WindowType;\n  private srcUrl: string;\n  loaded: boolean;\n  public ref: HTMLIFrameElement;\n  public componentField: ComponentField | IDealField;\n\n  // Promise resolver for Loading\n  iframeLoad: Promise<any>;\n  private iframeLoadSuccess: Function;\n  private iframeLoadFailed: Function;\n\n  initialize: Promise<any>;\n  initializeSuccess: Function;\n  initializeFailed: Function;\n  \n  constructor() {\n    this.iframeLoad = new Promise((resolve, reject) => {\n      this.iframeLoadSuccess = resolve;\n      this.iframeLoadFailed = reject;\n    })\n\n    this.initialize = new Promise((resolve, reject) => {\n      this.initializeSuccess = resolve\n      this.initializeFailed = reject;\n    })\n  }\n\n  static masterFrame(name: string, srcUrl: string): CbIframe {\n    const cbFrame = new CbIframe();\n    cbFrame.name = name;\n    cbFrame.type = WindowType.Master;\n    cbFrame.srcUrl = srcUrl;\n    return cbFrame;\n  }\n\n  static componentFrame(name: string, srcUrl: string): CbIframe {\n    const cbFrame = new CbIframe();\n    cbFrame.name = name;\n    cbFrame.type = WindowType.Component;\n    cbFrame.srcUrl = srcUrl;\n    return cbFrame;\n  }\n\n  insertInside(id: string, container: HTMLElement, componentField?: ComponentField | IDealField, styles?: any) {\n    const iframe: CbIframeElement = window.document.createElement(\"iframe\");\n    iframe.id = id;\n    iframe.name = this.name;\n    iframe.src = this.srcUrl;\n    iframe.instance = this;\n\n    const DEFAULT_HEIGHT = '1.2em'\n    // Iframe default styles\n    let frameStyles ={\n      margin: '0',\n      padding: '0',    \n      border: 'none',            \n      overflow: 'hidden',\n      display: 'block',\n      minWidth: '100%',\n      width: '1px',   \n      height: DEFAULT_HEIGHT,\n      ...styles\n    }\n    Object.keys(frameStyles).forEach(prop => {\n      iframe.style[prop] = frameStyles[prop];\n    });\n\n    const existingElement = <HTMLDivElement> document.getElementById(id);\n    \n    if(existingElement) {\n      iframe.id = iframe.id+'_frame'\n      existingElement.classList.add('CbHosted');\n\n      if(componentField && frameStyles.height === DEFAULT_HEIGHT) {\n        componentField.container = existingElement;        \n        this.componentField = componentField;\n        \n        // Setting default height\n        let _height = DEFAULT_HEIGHT;\n        try {\n          let fontSize = componentField.parent.options.style.base.fontSize\n          if(!!~fontSize.indexOf('px')) {\n            let height = (parseInt(fontSize.replace('px', ''))*1.2)+'px';\n            _height = height || DEFAULT_HEIGHT; \n          }\n        } catch(e) {\n          // set default height\n        }\n        iframe.style.height = _height\n      }\n\n      existingElement.appendChild(iframe);\n    }\n    else {\n      container.insertBefore(iframe, null);\n    }\n    this.ref = iframe;\n\n    return new Promise<boolean>((resolve, reject) => {\n      var interval;\n      const loadSuccess = () => {\n        this.iframeLoadSuccess();\n        clearInterval(interval)\n        resolve(true);\n      }\n\n      const loadFailure = () => {\n        clearInterval(interval)\n        if(!Helpers.isSPA()) {\n          const errorMessage = `${iframe.name} iframe load failed`\n          this.iframeLoadFailed(errorMessage);\n          reject(errorMessage);\n        }\n      }\n\n      iframe.onload = loadSuccess;\n\n      let count = 0\n      interval = setInterval(() => {\n        // @ts-ignore\n        if(window[`cb-${this.name}-loaded`]) {\n          loadSuccess()\n          return\n        }\n\n        count++;\n        if(count >= 100) {\n          loadFailure()\n          return\n        }\n      }, 100)\n\n      // NOTE: Nothing happens on rejecting/resolving a settled promise\n      setTimeout(loadFailure, 10000)\n    });\n  }\n\n  insert() {\n    let cbContainer = <HTMLDivElement>window.document.getElementById(Ids.CONTAINER);\n    return this.insertInside(this.name, cbContainer);\n  }\n\n  destroy() {\n    // Remove Iframe Contents & Delete from DOM\n    this.ref.innerHTML = ''\n    this.componentField.container.removeChild(this.ref);\n    delete this.ref\n    delete this.componentField\n  }\n}\n","import { ResponseInnerMessage, ActionInnerMessage, ReplyMessageOptions } from '@/hosted_fields/common/types';\nimport CbIframe, { CbIframeElement } from '@/hosted_fields/host/cb-iframe';\nimport Helpers from '@/helpers/index';\nimport Client, { MASTER_IFRAME_NAME } from '@/hosted_fields/common/connection/client';\nimport { Master } from \"@/hosted_fields/common/enums\";\nimport { WindowType } from '@/hosted_fields/common/enums';\nimport Receiver from '@/hosted_fields/common/connection/receiver';\nimport hostActions from '@/hosted_fields/host/host-actions';\nimport ComponentField from '@/hosted_fields/host/component-field';\nimport t from '@/hosted_fields/common/locale';\nimport ErrorCodes from '@/hosted_fields/common/errors';\nimport IDealField from './ideal-field';\nimport { MasterInitOptions } from '@/interfaces/cb-instance-options';\nimport EnvConstants from '@/constants/environment';\n\nexport const CHILD_IFRAME_NAME = (name: string, id: string): string => `cb-component-${name}-${id}`;\n\nconst helpers = {\n  hash(): string {\n    return `#${encodeURIComponent(window.location.host)}`\n  }\n}\n\nexport interface CbIframeClientInterface {\n  createMasterFrame(): Promise<any>;\n  createCbFrame(componentField: ComponentField, containerElement: HTMLElement): Promise<CbIframe> ;\n  register(message: ActionInnerMessage, frame: CbIframe): Promise<ResponseInnerMessage> ;\n  register(message: ActionInnerMessage, frame: CbIframe): Promise<ResponseInnerMessage> ;\n  send(message: ActionInnerMessage, name: string, options?: ReplyMessageOptions): Promise<ResponseInnerMessage> ;\n  listen(event: MessageEvent); \n  deregister(name: string) ;\n}\n\nclass CbIframeClient implements CbIframeClientInterface {\n  private commMgrReady: Promise<any>;\n  private masterFrame: CbIframe;\n  private childFrames: CbIframe[] = [];\n  private connectionClient: Client;\n\n  constructor() {\n    this.connectionClient = new Client(WindowType.Host, true);\n    new Receiver(WindowType.Host);\n    hostActions(this);\n  }\n\n  createMasterFrame(): Promise<any> {\n    if(this.checkMasterInitialized()) return this.commMgrReady;\n\n    this.masterFrame = CbIframe.masterFrame(\n      MASTER_IFRAME_NAME, \n      // @ts-ignore\n      `${EnvConstants.ASSET_PATH}/master.html${helpers.hash()}`\n    );\n    this.commMgrReady = this.masterFrame.insert()\n    .then(() => {\n      const cbInstance = Helpers.getCbInstance();\n      const payload: MasterInitOptions = {\n        host: window.location.origin,\n        site: cbInstance.site,\n        publishableKey: cbInstance.publishableKey,\n        businessEntityId: Helpers.getBusinessEntityId(),\n        options: cbInstance.options,\n        window_url: window.location.href,\n      }\n      // Registering HOST with master\n      let message: ActionInnerMessage = {\n        action: Master.Actions.RegisterMaster,\n        data: payload,\n      }\n      return this.register(message, this.masterFrame);\n    })\n    .catch((error) => {\n      this.masterFrame.initializeFailed(new Error(t(ErrorCodes.errorMountingMaster)));\n      console.error(t(ErrorCodes.errorMountingMaster));\n      if(error) console.error(error) // Cannot do sentry/splunk logs without master\n    });\n\n    return this.commMgrReady;\n  }\n\n  /**\n   * replaces existing div element with the given id with a corresponding iframe element\n   */\n  createCbFrame(componentField: ComponentField, containerElement: HTMLElement): Promise<CbIframe> {\n    const id = componentField.id;\n    const type = componentField.fieldType;\n    const options = componentField.options;\n    const childFrame = CbIframe.componentFrame(\n      CHILD_IFRAME_NAME.apply(null, [type, this.childFrames.length]), \n      // @ts-ignore\n      `${EnvConstants.ASSET_PATH}/component.html${helpers.hash()}`\n    );\n    this.childFrames.push(childFrame);\n\n    return childFrame.insertInside(id, containerElement, componentField)\n      // Wait for master frame to load\n      .then(() => this.masterFrame.initialize)\n      .then(() => childFrame)\n  }\n\n  createIDealFrame(componentField: IDealField, containerElement: HTMLElement, opts: any): Promise<CbIframe> {\n    const id = componentField.id;\n    const type = componentField.fieldType;\n    const childFrame = CbIframe.componentFrame(\n      CHILD_IFRAME_NAME.apply(null, [type, this.childFrames.length]), \n      // @ts-ignore\n      `${EnvConstants.ASSET_PATH}/component.html${helpers.hash()}`\n    );\n    this.childFrames.push(childFrame);\n\n    return childFrame.insertInside(id, containerElement, componentField, opts)\n      // Wait for master frame to load\n      .then(() => this.masterFrame.initialize)\n      .then(() => childFrame)\n  }\n \n  /**\n   * For registering a component/Field to Master\n   * @param message - action message\n   * @param name - iframe name\n   */\n  register(message: ActionInnerMessage, frame: CbIframe): Promise<ResponseInnerMessage> {\n    // Wait for master iframe to load\n    return this.masterFrame.iframeLoad\n    .then(() => this.connectionClient.sendMessage(message, MASTER_IFRAME_NAME, { timeout: 10000}))\n    .then(() => {\n      frame.initializeSuccess();\n      return {registered: true};\n    }).catch(err => {\n      // if(!Helpers.isSPA()) { // TODO check if needed?\n      frame.initializeFailed(err);\n      // console.error(err);\n      // }\n      return {registered: false};\n    })\n  }\n\n  private checkMasterInitialized() {\n    const masterIframe: CbIframeElement = <HTMLIFrameElement> document.getElementById(MASTER_IFRAME_NAME);\n    if(!this.masterFrame && masterIframe) this.masterFrame = masterIframe.instance;\n    return !!this.masterFrame && !!masterIframe;\n  }\n\n  /**\n   * Message communication with master\n   * @param message - action message\n   * @param name - iframe name\n   * @param options - message Options\n   */\n  send(message: ActionInnerMessage, name: string, options?: ReplyMessageOptions): Promise<ResponseInnerMessage> {\n    // Wait for master iframe to initialize\n    return this.createMasterFrame()\n      .then(() => this.masterFrame.initialize)\n      .then(() => this.connectionClient.sendMessage(message, name, options));\n  }\n\n  listen(event: MessageEvent) {\n    this.connectionClient.receiver.listen(event);\n  }\n\n  deregister(name: string) {\n    this.childFrames = this.childFrames.filter(f => f.name !== name)\n  }\n}\n\nconst cbIframeClient = new CbIframeClient();\nexport default cbIframeClient;\n","import Assert from '@/helpers/asserts';\nimport ComponentRegistrar from '@/hosted_fields/host/component-registrar';\nimport actionHolder from '@/hosted_fields/common/holder';\nimport { ActionInnerMessage, ResponseInnerMessage } from '@/hosted_fields/common/types';\nimport { Host, Master as M } from '@/hosted_fields/common/enums';\nimport Errors from '@/hosted_fields/common/errors';\nimport t from '@/hosted_fields/common/locale';\nimport { safeGet, jsonify } from '@/utils/utility-functions';\nimport Ids from '@/constants/ids';\nimport { CbIframeClientInterface } from '@/hosted_fields/host/cb-iframe-client'\n\nexport default (client: CbIframeClientInterface) => {\n  actionHolder.registerAction(Host.Actions.TriggerEvent, {\n    handle(message: ActionInnerMessage) {\n      const component = ComponentRegistrar.registry[message.data.frame];\n      Assert.notTrue(() => !!component, t(Errors.componentNotFound));\n      component.delegateEvent(message.data);\n      return new Promise((resolve, reject) => resolve({acknowledged: true}));\n    }\n  })\n\n  actionHolder.registerAction(Host.Actions.ReceiveStatusBroadcast, {\n    // !TODO will change and error event be passed using this??\n    handle(message: ActionInnerMessage) {\n      const component = ComponentRegistrar.registry[message.data.frame];\n      Assert.notTrue(() => !!component, t(Errors.componentNotFound));\n      component.delegateEvent(message.data);\n      return new Promise((resolve, reject) => resolve({acknowledged: true}));\n    }\n  })\n\n  actionHolder.registerAction(\n    Host.Actions.SetPaymentIntent3DSResult,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.SetPaymentIntent3DSResult,\n          data: message.data\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.SetAdyen3DS1VerificationResult,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.SetAdyen3DS1VerificationResult,\n          data: message.data\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    M.Actions.SetCheckoutCom3DSVerificationResult,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.SetCheckoutCom3DSVerificationResult,\n          data: message.data\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    M.Actions.SetCybersource3DSVerificationResult,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.SetCybersource3DSVerificationResult,\n          data: message.data\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.SetAdyenIDealVerificationResult,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        try {\n          client.send({\n            action: M.Actions.CaptureKVL,\n            data: {\n              action: 'iDeal_set_verification_result',\n              ...jsonify(message.data),\n            },\n          }, Ids.MASTER_FRAME);\n        } catch(e) {}\n\n        return client.send({\n          action: M.Actions.SetAdyenIDealVerificationResult,\n          data: message.data\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.SetStripeIDealVerificationResult,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        try {\n          client.send({\n            action: M.Actions.CaptureKVL,\n            data: {\n              action: 'iDeal_set_verification_result',\n              ...jsonify(message.data),\n            },\n          }, Ids.MASTER_FRAME);\n        } catch(e) {}\n\n        return client.send({\n          action: M.Actions.SetStripeIDealVerificationResult,\n          data: message.data\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.SetAdyenSofortVerificationResult,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.SetAdyenSofortVerificationResult,\n          data: message.data\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.SetAdyenBancontactVerificationResult,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.SetAdyenBancontactVerificationResult,\n          data: message.data\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.SetAdyenGiropayVerificationResult,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.SetAdyenGiropayVerificationResult,\n          data: message.data\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.SetAdyenDotpayVerificationResult,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.SetAdyenDotpayVerificationResult,\n          data: message.data\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.SetFrameLoaded,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        // @ts-ignore\n        window[`cb-${message.data.frame}-loaded`] = true;\n        return Promise.resolve({acknowledged: true})\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.CaptureKVL,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.CaptureKVL,\n          data: message.data,\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.CaptureException,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.CaptureException,\n          data: message.data,\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.SetAuthToken,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.SetHpData,\n          data: {\n            jwt: safeGet(message, 'data.jwt') || ''\n          },\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.SetCustomerHandle,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.SetHpData,\n          data: {\n            customer_handle: safeGet(message, 'data.customer_handle') || ''\n          },\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.SetPreviewPortalEmail,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        const email = safeGet(message, 'data.email') || ''\n        return client.send({\n          action: M.Actions.SetHpData,\n          data: {\n            preview_portal_email: email\n          },\n        }, Ids.MASTER_FRAME);\n      }\n    }\n  )\n\n  actionHolder.registerAction(\n    Host.Actions.GetPreviewPortalEmail,\n    {\n      handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n        return client.send({\n          action: M.Actions.GetHpData,\n          data: {\n            param: 'preview_portal_email'\n          },\n        }, Ids.MASTER_FRAME).then((data: any) => {\n          const preview_portal_email = data.preview_portal_email;\n          const portalFrame: HTMLIFrameElement = <HTMLIFrameElement> document.getElementById('cb-frame')\n          if(portalFrame && preview_portal_email) {\n            portalFrame.contentWindow.postMessage({\n              action: 'setPreviewPortalEmail',\n              referrer: 'chargebeejs',\n              data: {\n                preview_portal_email\n              }\n            }, '*')\n          }\n          return data;\n        });\n      }\n    }\n  )\n\n  actionHolder.registerAction(Host.Actions.ShowFrame, {\n    handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n      (<HTMLElement>document.querySelector(`iframe[name=${message.data}]`)).style.display = 'block'\n      return new Promise((resolve, reject) => resolve({acknowledged: true}));\n    }\n  })\n\n  actionHolder.registerAction(Host.Actions.HideFrame, {\n    handle: (message: ActionInnerMessage): Promise<ResponseInnerMessage> => {\n      (<HTMLElement>document.querySelector(`iframe[name=${message.data}]`)).style.display = 'none'\n      return new Promise((resolve, reject) => resolve({acknowledged: true}));\n    }\n  })\n}","import { Component } from '@/hosted_fields/common/base-types';\ninterface ComponentRegistry {\n  [frameName: string]: Component\n}\nexport default class ComponentRegistrar {\n  static registry: ComponentRegistry = {};\n\n  // Register each iframe against the component\n  static register(component: Component, frame: string) {\n    this.registry[frame] = component;\n  }\n}\n","import { ActionInnerMessage, ResponseInnerMessage } from '@/hosted_fields/common/types';\nimport BaseAction from \"@/hosted_fields/common/base-action\";\ninterface ActionRegistry {\n  [actionName: string] : BaseAction\n}\n\nclass ActionsHolder {\n  actionRegistry: ActionRegistry = {};\n  registerAction(actionName: string, action: BaseAction) {\n    this.actionRegistry[actionName] = action;\n  }\n\n  resolve(message: ActionInnerMessage): Promise<ResponseInnerMessage> {\n    const action: BaseAction = this.actionRegistry[message.action];\n    if(!action || !action.handle) {\n      console.log(`Unknown action: ${action}`)\n    } else {\n      return action.handle(message);\n    }\n  }\n}\n\n\n\nconst actionHolder = new ActionsHolder();\n\nexport default actionHolder;"],"sourceRoot":""}